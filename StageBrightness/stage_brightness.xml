<blocks app="Snap! 6, https://snap.berkeley.edu" version="1"><block-definition s="gray value of colour: %&apos;RGB&apos;" type="reporter" category="operators"><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><block s="doReport"><block s="reportSum"><block s="reportProduct"><l>0.299</l><block s="reportListItem"><l>1</l><block var="RGB"/></block></block><block s="reportSum"><block s="reportProduct"><l>0.597</l><block s="reportListItem"><l>2</l><block var="RGB"/></block></block><block s="reportProduct"><l>0.114</l><block s="reportListItem"><l>2</l><block var="RGB"/></block></block></block></block></block></script></block-definition><block-definition s="gray value of stage" type="reporter" category="sensing"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doDeclareVariables"><list><l>result</l></list></block><block s="doIf"><block s="reportNot"><custom-block s="does var %s exist?"><l>stage brightness area</l></custom-block></block><script><custom-block s="set stage brightness area x: %s %s y: %s %s"><l>-100</l><l>100</l><l>-100</l><l>100</l></custom-block></script></block><block s="doSetVar"><l>result</l><block s="evaluate"><block s="reportJSFunction"><list><l>costume</l><l>pixelarea</l></list><l>var ctx=costume.contents.getContext(&apos;2d&apos;);&#xD;var R=0,G=0,B=0,n=0,z;&#xD;var pixel,w=Number(costume.contents.width), h=Number(costume.contents.height);&#xD;var xl=w/2+Number(pixelarea.at(1));&#xD;var xr=w/2+Number(pixelarea.at(2));&#xD;var yu=h/2-Number(pixelarea.at(3));&#xD;var yl=h/2-Number(pixelarea.at(4));&#xD;if (xl &gt; xr) {z=xl; xl=xr; xr=z;}&#xD;if (yu &gt; yl) {z=yu; yu=yl; yl=z;}&#xD;for(var x=xl;x&lt;=xr;x++)&#xD;  for(var y=yu;y&lt;=yl;y++){&#xD;    pixel=ctx.getImageData(x,y,1,1);&#xD;    R+=pixel.data[0];&#xD;    G+=pixel.data[1];&#xD;    B+=pixel.data[2];&#xD;    n+=1;&#xD;    }&#xD;if (n &gt; 0) {&#xD;  R /= n;&#xD;  G /= n;&#xD;  B /= n;&#xD;}&#xD;return new List(new Array(R,G,B));</l></block><list><block s="reportAskFor"><l>Stage</l><block s="reifyReporter"><autolambda><block s="reportGet"><l><option>costume</option></l></block></autolambda><list></list></block><list></list></block><block var="stage brightness area"/></list></block></block><block s="doReport"><custom-block s="gray value of colour: %s"><block var="result"/></custom-block></block></script></block-definition><block-definition s="colour of stage" type="reporter" category="sensing"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doDeclareVariables"><list><l>result</l></list></block><block s="doIf"><block s="reportNot"><custom-block s="does var %s exist?"><l>stage brightness area</l></custom-block></block><script><custom-block s="set stage brightness area x: %s %s y: %s %s"><l>-100</l><l>100</l><l>-100</l><l>100</l></custom-block></script></block><block s="doSetVar"><l>result</l><block s="evaluate"><block s="reportJSFunction"><list><l>costume</l><l>pixelarea</l></list><l>var ctx=costume.contents.getContext(&apos;2d&apos;);&#xD;var R=0,G=0,B=0,n=0,z;&#xD;var pixel,w=Number(costume.contents.width), h=Number(costume.contents.height);&#xD;var xl=w/2+Number(pixelarea.at(1));&#xD;var xr=w/2+Number(pixelarea.at(2));&#xD;var yu=h/2-Number(pixelarea.at(3));&#xD;var yl=h/2-Number(pixelarea.at(4));&#xD;if (xl &gt; xr) {z=xl; xl=xr; xr=z;}&#xD;if (yu &gt; yl) {z=yu; yu=yl; yl=z;}&#xD;for(var x=xl;x&lt;=xr;x++)&#xD;  for(var y=yu;y&lt;=yl;y++){&#xD;    pixel=ctx.getImageData(x,y,1,1);&#xD;    R+=pixel.data[0];&#xD;    G+=pixel.data[1];&#xD;    B+=pixel.data[2];&#xD;    n+=1;&#xD;    }&#xD;if (n &gt; 0) {&#xD;  R /= n;&#xD;  G /= n;&#xD;  B /= n;&#xD;}&#xD;return new List(new Array(R,G,B));</l></block><list><block s="reportAskFor"><l>Stage</l><block s="reifyReporter"><autolambda><block s="reportGet"><l><option>costume</option></l></block></autolambda><list></list></block><list></list></block><block var="stage brightness area"/></list></block></block><block s="doReport"><block var="result"/></block></script></block-definition><block-definition s="set stage brightness area x: %&apos;xmin&apos; %&apos;xmax&apos; y: %&apos;ymin&apos; %&apos;ymax:&apos;" type="command" category="sensing"><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%s"></input><input type="%s"></input><input type="%s"></input></inputs><script><block s="doIf"><block s="reportNot"><custom-block s="does var %s exist?"><l>stage brightness area</l></custom-block></block><script><custom-block s="create %s var %mult%txt"><l>global</l><list><l>stage brightness area</l></list></custom-block></script></block><block s="doSetVar"><l>stage brightness area</l><block s="reportNewList"><list><block var="xmin"/><block var="xmax"/><block var="ymin"/><block var="ymax:"/></list></block></block></script></block-definition><block-definition s="create %&apos;scope&apos; var %&apos;names&apos;" type="command" category="variables"><comment x="0" y="0" w="146" collapsed="false">This block creates  new variables on the selected scope: global (for all sprites), sprite (for this sprite only) or script (only for that blocks stack) with the names given (in &apos;names&apos; list).&#xD;&#xD;If there is already a variable with that name in that scope, it does nothing: no errors and no overwrites.</comment><header></header><code></code><translations>pt:cria as variáveis _ _&#xD;ca:crea les _ variables _&#xD;es:crear las _ variables _&#xD;de:erstellen _ var _&#xD;</translations><inputs><input type="%s" readonly="true">global<options>global&#xD;sprite&#xD;script</options></input><input type="%mult%txt"></input></inputs><script><block s="doIfElse"><block s="reportEquals"><block var="scope"/><l>script</l></block><script><block s="doForEach"><l>each item</l><block var="names"/><script><block s="doRun"><block s="reportJSFunction"><list><l>varName</l><l>proc</l></list><l>if ((typeof varName) != "string" || varName === "") {&#xD;    throw new Error("name isn&apos;t a string: " + varName);&#xD;}&#xD;if (!proc.homeContext.variables.vars[varName]) proc.homeContext.variables.addVar(varName);</l></block><list><block var="each item"/></list></block></script></block></script><script><block s="doDeclareVariables"><list><l>global</l></list></block><block s="doIfElse"><block s="reportEquals"><block var="scope"/><l>sprite</l></block><script><block s="doSetVar"><l>global</l><block s="reportBoolean"><l><bool>false</bool></l></block></block></script><script><block s="doSetVar"><l>global</l><block s="reportBoolean"><l><bool>true</bool></l></block></block></script></block><block s="doForEach"><l>each item</l><block var="names"/><script><block s="doRun"><block s="reportJSFunction"><list><l>varName</l><l>global</l><l>proc</l></list><l>if ((typeof varName) != "string" || varName === "") {&#xD;    throw new Error("name isn&apos;t a string: " + varName);&#xD;}&#xD;if (global &amp;&amp; !proc.homeContext.variables.parentFrame.parentFrame.vars[varName]) this.addVariable(varName, true);&#xD;if (!global &amp;&amp; !proc.homeContext.variables.parentFrame.vars[varName]) this.addVariable(varName, false);</l></block><list><block var="each item"/><block var="global"/></list></block></script></block><block s="doRun"><block s="reportJSFunction"><list></list><l>var ide = this.parentThatIsA(IDE_Morph);&#xD;ide.flushBlocksCache(&apos;variables&apos;); // b/c of inheritance&#xD;ide.refreshPalette();</l></block><list></list></block></script></block></script></block-definition><block-definition s="does var %&apos;name&apos; exist?" type="predicate" category="variables"><comment x="0" y="0" w="146" collapsed="false">This block reports &quot;true&quot; if there is a variable with this given name (input slot) in that context.&#xD;&#xD;It can be a global, sprite or script variable.&#xD;&#xD;Otherwise it reports &quot;false&quot;.</comment><header></header><code></code><translations>pt:a variável _ existe&#xD;ca:existeix la variable _ ?&#xD;es:existe la variable _ ?&#xD;de:existiert var _ ?&#xD;</translations><inputs><input type="%s"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>varName</l><l>proc</l></list><l>if ((typeof varName) != "string" || varName === "") {&#xD;    throw new Error("name isn&apos;t a string: " + varName);&#xD;}&#xD;return proc.homeContext.variables.silentFind(varName)? true:false;</l></block><list><block var="name"/></list></block></block></script></block-definition></blocks>